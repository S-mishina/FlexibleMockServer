---
# Source: locust-k8s-operator/templates/serviceaccount-and-roles.yaml
# Check if serviceAccount creation is enabled.
# + If false, the entire block will be skipped.# Initialize variables for reuse.
# + $serviceAccountName; stores the name of the service account.
# + $namespace; stores the namespace where resources will be deployed.
# + $k8sServicesVerbs and $k8sJobsVerbs; define the permissions for Kubernetes services and jobs, respectively.

# Define the ServiceAccount resource.
# This account is used to execute the tasks within the Kubernetes cluster.
apiVersion: v1
kind: ServiceAccount
metadata:
  name: locust-operator-locust-k8s-operator
  namespace: "default"
  labels:
    helm.sh/chart: locust-k8s-operator-0.10.0
    app.kubernetes.io/name: locust-k8s-operator
    app.kubernetes.io/instance: locust-operator
    app.kubernetes.io/version: "0.10.0"
    app.kubernetes.io/managed-by: Helm

# Add image pull secrets if specified in values.
---
# Source: locust-k8s-operator/templates/serviceaccount-and-roles.yaml
# Define RBAC (Role-Based Access Control) resources.
# This section creates either a ClusterRole or a Role based on the value of k8s.clusterRole.enabled.

# Conditionally create either a ClusterRole (for cluster-wide permissions)
# + or a Role (for namespace-specific permissions).
# + The default is to create a namespace-specific Role.
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: locust-operator-locust-k8s-operator

  # Specify the namespace only if creating a Role (namespace-specific permissions).
  namespace: "default"

rules:
  - apiGroups: [ "locust.io" ]
    resources: [ "locusttests" ]
    verbs: [ "*" ]  # Full access to locusttests resources.
  - apiGroups: [ "*" ]
    resources: [ "services" ]
    verbs: 
      - get
      - list
      - create
      - update
      - delete  # Permissions for managing services.
  - apiGroups: [ "*" ]
    resources: [ "jobs" ]
    verbs: 
      - get
      - list
      - create
      - update
      - delete
      - patch  # Permissions for managing jobs.
---
# Source: locust-k8s-operator/templates/serviceaccount-and-roles.yaml
# Create a corresponding ClusterRoleBinding or RoleBinding
# + to bind the ServiceAccount to the appropriate ClusterRole or Role.
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: locust-operator-locust-k8s-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: locust-operator-locust-k8s-operator
subjects:
  - kind: ServiceAccount
    name: locust-operator-locust-k8s-operator
    namespace: "default"
---
# Source: locust-k8s-operator/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: locust-operator-locust-k8s-operator
  labels:
    helm.sh/chart: locust-k8s-operator-0.10.0
    app.kubernetes.io/name: locust-k8s-operator
    app.kubernetes.io/instance: locust-operator
    app.kubernetes.io/version: "0.10.0"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: locust-k8s-operator
      app.kubernetes.io/instance: locust-operator
  template:
    metadata:
      labels:
        app.kubernetes.io/name: locust-k8s-operator
        app.kubernetes.io/instance: locust-operator
    spec:
      serviceAccountName: locust-operator-locust-k8s-operator
      containers:
        - name: locust-k8s-operator
          image: "lotest/locust-k8s-operator:0.10.0"
          imagePullPolicy: IfNotPresent
          ports:
            - name: micronaut-port
              containerPort: 8080
          livenessProbe:
            failureThreshold: 1
            httpGet:
              path: /health
              port: micronaut-port
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 20
            timeoutSeconds: 10
          readinessProbe:
            failureThreshold: 1
            httpGet:
              path: /health
              port: micronaut-port
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 20
            timeoutSeconds: 10
          resources:
            {}
          env:
            - name: APP_SERVER_PORT
              value: "8080"
            # K8s config
            - name: K8S_NAMESPACE
              value: "default"
            # Kafka config
            - name: KAFKA_BOOTSTRAP_SERVERS
              value: "localhost:9092"
            - name: KAFKA_SECURITY_ENABLED
              value: "false"

            # Load generation job config
            - name: JOB_TTL_SECONDS_AFTER_FINISHED
              value: "1"

            # Load generation resource config
            - name: POD_CPU_REQUEST
              value: "250m"
            - name: POD_MEM_REQUEST
              value: "128Mi"
            - name: POD_EPHEMERAL_REQUEST
              value: "30M"
            - name: POD_CPU_LIMIT
              value: "1000m"
            - name: POD_MEM_LIMIT
              value: "1024Mi"
            - name: POD_EPHEMERAL_LIMIT
              value: "50M"
            - name: ENABLE_AFFINITY_CR_INJECTION
              value: "true"
            - name: ENABLE_TAINT_TOLERATIONS_CR_INJECTION
              value: "true"

            # Metrics Exporter config
            - name: METRICS_EXPORTER_IMAGE
              value: "containersol/locust_exporter:v0.5.0"
            - name: METRICS_EXPORTER_PORT
              value: "9646"
            - name: METRICS_EXPORTER_IMAGE_PULL_POLICY
              value: "IfNotPresent"
            - name: METRICS_EXPORTER_CPU_REQUEST
              value: "250m"
            - name: METRICS_EXPORTER_MEM_REQUEST
              value: "128Mi"
            - name: METRICS_EXPORTER_EPHEMERAL_REQUEST
              value: "30M"
            - name: METRICS_EXPORTER_CPU_LIMIT
              value: "250m"
            - name: METRICS_EXPORTER_MEM_LIMIT
              value: "128Mi"
            - name: METRICS_EXPORTER_EPHEMERAL_LIMIT
              value: "50M"

            # Metric config
            - name: METRICS_ENABLE
              value: "true"
            - name: METRICS_WEB_ENABLE
              value: "true"
            - name: METRICS_JVM_ENABLE
              value: "true"
            - name: METRICS_UPTIME_ENABLE
              value: "true"
            - name: METRICS_PROCESSOR_ENABLE
              value: "true"
            - name: METRICS_FILES_ENABLE
              value: "false"
            - name: METRICS_LOGBACK_ENABLE
              value: "false"
            - name: METRICS_EXECUTOR_ENABLE
              value: "false"
            - name: METRICS_PROMETHEUS_STEP
              value: "PT30S"

